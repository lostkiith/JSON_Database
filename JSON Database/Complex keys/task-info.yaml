type: edu
files:
- name: src/client/Main.java
  visible: true
  text: |
    package client;

    import com.beust.jcommander.JCommander;
    import com.beust.jcommander.Parameter;
    import com.google.gson.Gson;


    import java.io.*;
    import java.net.Socket;
    import java.util.HashMap;
    import java.util.Map;
    import java.util.concurrent.ExecutorService;

    public class Main {

        private final static String address = "127.0.0.1";
        private final static int port = 34522;

        @Parameter(names={"-in"})
        static String name = "";
        @Parameter(names={"-t"})
        static String type = "";
        @Parameter(names={"-k"})
        static String key = "";
        @Parameter(names={"-v"})
        static String Value = "";

        public static void main(String[] args) {

            Main main = new Main();
            JCommander.newBuilder().addObject(main).build().parse(args);
            main.run();
        }

        private void run() {
            try (Socket socket = new Socket(address, port);
                 DataInputStream input = new DataInputStream(socket.getInputStream());
                 DataOutputStream output = new DataOutputStream(socket.getOutputStream())) {
                System.out.println("Client started!");

                // create message and format it to JSON
                Gson gson = new Gson();
                Map<String, String> request = new HashMap<>();

                if (!name.equals("")) {
                    BufferedReader bufferedReader = new BufferedReader(
                            new FileReader("./src/client/data/"+name));
                    HashMap<String, String> json = gson.fromJson(bufferedReader, HashMap.class);
                    if (!json.containsValue("set")) {
                        request.put("type", json.get("type"));
                        request.put("key", json.get("key"));
                    } else {
                        request.put("type", json.get("type"));
                        request.put("key", json.get("key"));
                        request.put("value", json.get("value"));
                    }
                    System.out.println("TESTING");
                    System.out.println(request);
                } else {
                    if (!type.equals("set")) {
                        request.put("type", type);
                        request.put("key", key);

                    } else {
                        request.put("type", type);
                        request.put("key", key);
                        request.put("value", Value);
                    }
                }

                String message = gson.toJson(request);

                // send message to the client.
                System.out.println("Sent: "+message);
                output.writeUTF(message);

                // read response and print.
                String response = input.readUTF();
                System.out.println("Received: "+response);

            } catch (IOException e) {
                System.out.println("Error! The server is offline.");
            }

        }
    }
  learner_created: false
- name: src/server/Main.java
  visible: true
  text: |+
    package server;

    import com.google.gson.Gson;
    import com.google.gson.reflect.TypeToken;

    import java.io.*;
    import java.net.InetAddress;
    import java.net.ServerSocket;
    import java.net.Socket;
    import java.util.HashMap;
    import java.util.Map;
    import java.util.concurrent.ExecutorService;
    import java.util.concurrent.Executors;
    import java.util.concurrent.locks.Lock;
    import java.util.concurrent.locks.ReadWriteLock;
    import java.util.concurrent.locks.ReentrantReadWriteLock;

    public class Main {

        private static final int SERVER_PORT = 34522;
        private static final MessageBroker messageBroker = new MessageBroker();
        private static final DataBase database = new DataBase();
        private static final ReadWriteLock lock = new ReentrantReadWriteLock();
        private static final Lock readLock = lock.readLock();
        private static final Lock writeLock = lock.writeLock();

        public static void main(String[] args) {

            try (ServerSocket server = new  ServerSocket(SERVER_PORT)) {
                System.out.println("Server started!");
                ExecutorService executor = Executors.newFixedThreadPool(Runtime.getRuntime().availableProcessors());

                while (true) {
                    Socket socket = server.accept();
                    executor.submit(() -> {
                        try {
                            Processing(socket, server);
                        } catch (IOException e) {
                            e.printStackTrace();
                        }
                    });
                }
            } catch (IOException e) {
                e.printStackTrace();
            }
        }

        private static void Processing(Socket socket, ServerSocket server) throws IOException {

            DataInputStream input = new DataInputStream(socket.getInputStream());
            DataOutputStream output = new DataOutputStream(socket.getOutputStream());
            // format request
            Gson gson = new Gson();
            HashMap<String, String> request =
                    gson.fromJson(input.readUTF(), new TypeToken<HashMap<String, String>>() {
                    }.getType());

            if (request.containsValue("exit")) {
                input.close();
                output.close();
                socket.close();
                server.close();
                System.exit(0);
            }
            // process the request
            MessageProcessing(output, request);
            socket.close();
        }

        // Util methods
        private static void MessageProcessing(DataOutputStream output,  HashMap<String, String> request) throws IOException {
            Command commandOp;
            Map<String, String> resolveMessage;
            Gson gson = new Gson();

            if (request.get("type").equals("get")) {
                readLock.lock();
                commandOp = new GetCommand(Main.database, request.get("key"));
                resolveMessage = executeCommands(commandOp);
                String message = gson.toJson(resolveMessage);
                output.writeUTF(message);
                readLock.unlock();
            }
            if (request.get("type").equals("set")) {
                writeLock.lock();
                commandOp = new SetCommand(Main.database, request);
                resolveMessage = executeCommands(commandOp);
                String message = gson.toJson(resolveMessage);
                output.writeUTF(message);
                writeLock.unlock();
            }
            if (request.get("type").equals("delete")) {
                writeLock.lock();
                commandOp = new DeleteCommand(Main.database, request.get("key"));
                resolveMessage = executeCommands(commandOp);
                String message = gson.toJson(resolveMessage);
                output.writeUTF(message);
                writeLock.unlock();

            }
         }
        private static Map<String, String> executeCommands(Command command) {
            messageBroker.setCommand(command);
            messageBroker.executeCommand();
            return messageBroker.getResolveCode();
        }
    }

  learner_created: false
- name: test/JsonDatabaseTest.java
  visible: false
  text: "import com.google.gson.Gson;\nimport com.google.gson.JsonArray;\nimport org.hyperskill.hstest.dynamic.DynamicTest;\n\
    import org.hyperskill.hstest.exception.outcomes.WrongAnswer;\nimport org.hyperskill.hstest.stage.StageTest;\n\
    import org.hyperskill.hstest.testcase.CheckResult;\nimport org.hyperskill.hstest.testing.TestedProgram;\n\
    import org.junit.AfterClass;\nimport org.junit.BeforeClass;\n\nimport java.io.File;\n\
    import java.io.IOException;\nimport java.lang.management.ManagementFactory;\n\
    import java.nio.charset.StandardCharsets;\nimport java.nio.file.Files;\nimport\
    \ java.nio.file.Paths;\nimport java.nio.file.StandardCopyOption;\nimport java.util.List;\n\
    \nimport static org.hyperskill.hstest.testing.expect.Expectation.expect;\nimport\
    \ static org.hyperskill.hstest.testing.expect.json.JsonChecker.isArray;\nimport\
    \ static org.hyperskill.hstest.testing.expect.json.JsonChecker.isObject;\n\npublic\
    \ class JsonDatabaseTest extends StageTest<String> {\n\n    private static final\
    \ String OK_STATUS = \"OK\";\n    private static final String ERROR_STATUS = \"\
    ERROR\";\n    private static final String NO_SUCH_KEY_REASON = \"No such key\"\
    ;\n\n    private static final String WRONG_EXIT = \"The server should stop when\
    \ client sends 'exit' request\";\n\n    private static final String fileName =\
    \ \"data.json\";\n    private static final String serverFolderPath = System.getProperty(\"\
    user.dir\") + File.separator +\n        \"src\" + File.separator +\n        \"\
    server\" + File.separator +\n        \"data\";\n    private static final String\
    \ serverJsonFileName = serverFolderPath + File.separator + fileName;\n\n    private\
    \ static final String clientFolderPath = System.getProperty(\"user.dir\") + File.separator\
    \ +\n        \"src\" + File.separator +\n        \"client\" + File.separator +\n\
    \        \"data\";\n\n    private static final Gson gson = new Gson();\n\n   \
    \ private static final String setFileContent = JsonBuilder.newBuilder()\n    \
    \    .addValue(\"type\", \"set\")\n        .addValue(\"key\", \"person\")\n  \
    \      .addJsonObject(\"value\", JsonBuilder.newBuilder()\n            .addValue(\"\
    name\", \"Elon Musk\")\n            .addJsonObject(\"car\",\n                JsonBuilder.newBuilder()\n\
    \                    .addValue(\"model\", \"Tesla Roadster\")\n              \
    \      .addValue(\"year\", \"2018\")\n                    .getAsJsonObject()\n\
    \            )\n            .addJsonObject(\"rocket\",\n                JsonBuilder.newBuilder()\n\
    \                    .addValue(\"name\", \"Falcon 9\")\n                    .addValue(\"\
    launches\", \"87\")\n                    .getAsJsonObject())\n            .getAsJsonObject())\n\
    \        .getAsString();\n\n    private static final String getFileContent = JsonBuilder.newBuilder()\n\
    \        .addValue(\"type\", \"get\")\n        .addValue(\"key\", gson.fromJson(\"\
    [person, name]\", JsonArray.class))\n        .getAsString();\n\n    private static\
    \ final String secondGetFileContent = JsonBuilder.newBuilder()\n        .addValue(\"\
    type\", \"get\")\n        .addValue(\"key\", gson.fromJson(\"[person]\", JsonArray.class))\n\
    \        .getAsString();\n\n    private static final String deleteFileContent\
    \ = JsonBuilder.newBuilder()\n        .addValue(\"type\", \"delete\")\n      \
    \  .addValue(\"key\", gson.fromJson(\"[person, car, year]\", JsonArray.class))\n\
    \        .getAsString();\n\n    private static final String updateFileContent\
    \ = JsonBuilder.newBuilder()\n        .addValue(\"type\", \"set\")\n        .addValue(\"\
    key\", gson.fromJson(\"[person, rocket, launches]\", JsonArray.class))\n     \
    \   .addValue(\"value\", \"88\")\n        .getAsString();\n\n    private static\
    \ int threadsCount;\n\n    @DynamicTest(order = 1)\n    CheckResult checkExit()\
    \ {\n\n        TestedProgram server = getServer();\n        server.startInBackground();\n\
    \n        try {\n            Thread.sleep(100);\n        } catch (InterruptedException\
    \ e) {\n            e.printStackTrace();\n        }\n\n        TestedProgram client\
    \ = getClient();\n        client.start(\"-t\", \"exit\");\n\n        try {\n \
    \           Thread.sleep(100);\n        } catch (InterruptedException e) {\n \
    \           e.printStackTrace();\n        }\n\n        if (!server.isFinished())\
    \ {\n            server.stop();\n            return CheckResult.wrong(WRONG_EXIT);\n\
    \        }\n\n        return CheckResult.correct();\n    }\n\n    @DynamicTest(order\
    \ = 2)\n    CheckResult checkJsonFile() throws IOException {\n\n        if (!Files.exists(Paths.get(serverFolderPath)))\
    \ {\n            return CheckResult.wrong(\"Can't find /server/data folder\");\n\
    \        }\n\n        if (!Files.exists(Paths.get(serverJsonFileName))) {\n  \
    \          return CheckResult.wrong(\"Can't find \" + fileName + \" file in the\
    \ /server/data folder\");\n        }\n\n        if (!Files.exists(Paths.get(clientFolderPath)))\
    \ {\n            return CheckResult.wrong(\"Can't find /client/data folder\");\n\
    \        }\n\n        createJsonFiles();\n\n        return CheckResult.correct();\n\
    \    }\n\n    private static void createJsonFiles() throws IOException {\n   \
    \     Files.write(Paths.get(clientFolderPath + File.separator + \"setFile.json\"\
    ),\n            List.of(setFileContent),\n            StandardCharsets.UTF_8);\n\
    \        Files.write(Paths.get(clientFolderPath + File.separator + \"getFile.json\"\
    ),\n            List.of(getFileContent),\n            StandardCharsets.UTF_8);\n\
    \        Files.write(Paths.get(clientFolderPath + File.separator + \"secondGetFile.json\"\
    ),\n            List.of(secondGetFileContent),\n            StandardCharsets.UTF_8);\n\
    \        Files.write(Paths.get(clientFolderPath + File.separator + \"deleteFile.json\"\
    ),\n            List.of(deleteFileContent),\n            StandardCharsets.UTF_8);\n\
    \        Files.write(Paths.get(clientFolderPath + File.separator + \"updateFile.json\"\
    ),\n            List.of(updateFileContent),\n            StandardCharsets.UTF_8);\n\
    \    }\n\n    @DynamicTest(order = 3)\n    CheckResult testInputs() throws InterruptedException\
    \ {\n        \n        threadsCount = getThreadCount();\n\n        TestedProgram\
    \ server = getServer();\n        server.startInBackground();\n\n        try {\n\
    \            Thread.sleep(100);\n        } catch (InterruptedException e) {\n\
    \            e.printStackTrace();\n        }\n\n        TestedProgram client;\n\
    \        String output;\n\n        String requestJson;\n        String responseJson;\n\
    \        \n        client = getClient();\n        output = client.start(\"-t\"\
    , \"set\", \"-k\", \"1\", \"-v\", \"Hello world!\");\n        requestJson = JsonFinder.findRequestJsonObject(output);\n\
    \        expect(requestJson)\n            .asJson()\n            .check(isObject()\n\
    \                .value(\"type\", \"set\")\n                .value(\"key\", \"\
    1\")\n                .value(\"value\", \"Hello world!\")\n            );\n  \
    \      responseJson = JsonFinder.findResponseJsonObject(output);\n        expect(responseJson)\n\
    \            .asJson()\n            .check(isObject()\n                .value(\"\
    response\", OK_STATUS)\n            );\n\n        // Files\n        client = getClient();\n\
    \        output = client.start(\"-in\", \"setFile.json\");\n        requestJson\
    \ = JsonFinder.findRequestJsonObject(output);\n        expect(requestJson)\n \
    \           .asJson()\n            .check(isObject()\n                .value(\"\
    key\", \"person\")\n                .value(\"value\", isObject()\n           \
    \         .value(\"name\", \"Elon Musk\")\n                    .value(\"car\"\
    , isObject()\n                        .value(\"model\", \"Tesla Roadster\")\n\
    \                        .anyOtherValues()\n                    )\n          \
    \          .anyOtherValues()\n                )\n                .anyOtherValues()\n\
    \            );\n        responseJson = JsonFinder.findResponseJsonObject(output);\n\
    \        expect(responseJson)\n            .asJson()\n            .check(isObject()\n\
    \                .value(\"response\", OK_STATUS)\n            );\n\n        client\
    \ = getClient();\n        output = client.start(\"-in\", \"getFile.json\");\n\
    \        requestJson = JsonFinder.findRequestJsonObject(output);\n        expect(requestJson)\n\
    \            .asJson()\n            .check(isObject()\n                .value(\"\
    type\", \"get\")\n                .value(\"key\", isArray(\"person\", \"name\"\
    ))\n            );\n        responseJson = JsonFinder.findResponseJsonObject(output);\n\
    \        expect(responseJson)\n            .asJson()\n            .check(\n  \
    \              isObject()\n                    .value(\"response\", OK_STATUS)\n\
    \                    .value(\"value\", \"Elon Musk\")\n            );\n\n\n  \
    \      client = getClient();\n        output = client.start(\"-in\", \"updateFile.json\"\
    );\n        requestJson = JsonFinder.findRequestJsonObject(output);\n        expect(requestJson)\n\
    \            .asJson()\n            .check(isObject()\n                .value(\"\
    type\", \"set\")\n                .value(\"key\", isArray(\"person\", \"rocket\"\
    , \"launches\"))\n                .value(\"value\", \"88\")\n            );\n\
    \        responseJson = JsonFinder.findResponseJsonObject(output);\n        expect(responseJson)\n\
    \            .asJson()\n            .check(\n                isObject()\n    \
    \                .value(\"response\", OK_STATUS)\n            );\n\n\n       \
    \ client = getClient();\n        output = client.start(\"-in\", \"secondGetFile.json\"\
    );\n        requestJson = JsonFinder.findRequestJsonObject(output);\n        expect(requestJson)\n\
    \            .asJson()\n            .check(isObject()\n                .value(\"\
    type\", \"get\")\n                .value(\"key\", isArray(\"person\"))\n     \
    \       );\n        responseJson = JsonFinder.findResponseJsonObject(output);\n\
    \        expect(responseJson)\n            .asJson()\n            .check(\n  \
    \              isObject()\n                    .value(\"response\", OK_STATUS)\n\
    \                    .value(\"value\", isObject()\n                        .value(\"\
    rocket\", isObject()\n                            .value(\"name\", \"Falcon 9\"\
    )\n                            .value(\"launches\", \"88\")\n                \
    \        )\n                        .anyOtherValues()\n                    )\n\
    \            );\n\n\n        client = getClient();\n        output = client.start(\"\
    -in\", \"deleteFile.json\");\n        requestJson = JsonFinder.findRequestJsonObject(output);\n\
    \        expect(requestJson)\n            .asJson()\n            .check(isObject()\n\
    \                .value(\"type\", \"delete\")\n                .value(\"key\"\
    , isArray(\"person\", \"car\", \"year\"))\n            );\n        responseJson\
    \ = JsonFinder.findResponseJsonObject(output);\n        expect(responseJson)\n\
    \            .asJson()\n            .check(\n                isObject()\n    \
    \                .value(\"response\", OK_STATUS)\n            );\n\n\n       \
    \ client = getClient();\n        output = client.start(\"-in\", \"secondGetFile.json\"\
    );\n        requestJson = JsonFinder.findRequestJsonObject(output);\n        expect(requestJson)\n\
    \            .asJson()\n            .check(isObject()\n                .value(\"\
    type\", \"get\")\n                .value(\"key\", isArray(\"person\"))\n     \
    \       );\n        responseJson = JsonFinder.findResponseJsonObject(output);\n\
    \        expect(responseJson)\n            .asJson()\n            .check(\n  \
    \              isObject()\n                    .value(\"response\", OK_STATUS)\n\
    \                    .value(\"value\", isObject()\n                        .value(\"\
    rocket\", isObject()\n                            .value(\"name\", \"Falcon 9\"\
    )\n                            .value(\"launches\", \"88\")\n                \
    \        )\n                        .value(\"car\", isObject()\n             \
    \               .value(\"model\", \"Tesla Roadster\")\n                      \
    \  )\n                        .anyOtherValues()\n                    )\n     \
    \       );\n        checkIfThreadWasCreated();\n\n\n        client = getClient();\n\
    \        client.start(\"-t\", \"exit\");\n\n        return CheckResult.correct();\n\
    \    }\n\n    private static TestedProgram getClient() {\n        return new TestedProgram(\"\
    client\");\n    }\n\n    private static TestedProgram getServer() {\n        return\
    \ new TestedProgram(\"server\");\n    }\n\n    private static int getThreadCount()\
    \ {\n        return (int) ManagementFactory.getThreadMXBean().getTotalStartedThreadCount();\n\
    \    }\n\n    private static void checkIfThreadWasCreated() {\n\n        int total\
    \ = getThreadCount();\n\n        /*8 threads: 1 server thread and 7 client threads\
    \ created during the test.\n         If the server doesn't handle clients in a\
    \ new thread then the difference between number of threads\n         before and\
    \ after the test should be equal 8 */\n        if (total - threadsCount == 8)\
    \ {\n            throw new WrongAnswer(\"Looks like you don't process client connection\
    \ in another thread.\\n\" +\n                \"Every client request should be\
    \ parsed and handled in a separate thread!\\n\" +\n                (total - threadsCount));\n\
    \        }\n    }\n\n    @AfterClass\n    public static void deleteFiles() {\n\
    \        try {\n            Files.delete(Paths.get(clientFolderPath + File.separator\
    \ + \"setFile.json\"));\n            Files.delete(Paths.get(clientFolderPath +\
    \ File.separator + \"getFile.json\"));\n            Files.delete(Paths.get(clientFolderPath\
    \ + File.separator + \"secondGetFile.json\"));\n            Files.delete(Paths.get(clientFolderPath\
    \ + File.separator + \"deleteFile.json\"));\n            Files.delete(Paths.get(clientFolderPath\
    \ + File.separator + \"updateFile.json\"));\n        } catch (IOException ignored)\
    \ {\n        }\n\n        String filePath = serverFolderPath + File.separator\
    \ + fileName;\n        String tempFilePath = serverFolderPath + File.separator\
    \ + \"temp.json\";\n\n        try {\n            Files.copy(Paths.get(tempFilePath),\
    \ Paths.get(filePath), StandardCopyOption.REPLACE_EXISTING);\n            Files.delete(Paths.get(tempFilePath));\n\
    \        } catch (IOException ignored) {\n        }\n    }\n\n    @BeforeClass\n\
    \    public static void copyFiles() {\n\n        String filePath = serverFolderPath\
    \ + File.separator + fileName;\n        String tempFilePath = serverFolderPath\
    \ + File.separator + \"temp.json\";\n\n        try {\n            Files.createFile(Paths.get(tempFilePath));\n\
    \        } catch (IOException ignored) {\n        }\n\n        try {\n       \
    \     Files.copy(Paths.get(filePath), Paths.get(tempFilePath), StandardCopyOption.REPLACE_EXISTING);\n\
    \        } catch (IOException ignored) {\n        }\n\n        try {\n       \
    \     Files.write(Paths.get(filePath), \"{}\".getBytes());\n        } catch (IOException\
    \ ignored) {\n        }\n    }\n}\n"
  learner_created: false
- name: src/server/DeleteCommand.java
  visible: true
  text: |-
    package server;

    import java.util.HashMap;
    import java.util.Map;

    public class DeleteCommand implements Command{

        DataBase dataBase;
        String key;
        private Map<String, String> resolveCode;

        public DeleteCommand(DataBase database, String index) {
            this.dataBase = database;
            this.key = index;
            resolveCode = new HashMap<>();
        }

        @Override
        public void execute() {

            String message = dataBase.deleteEntry(key);
            if (message == null) {
                resolveCode.put("response", "ERROR");
                resolveCode.put("reason", "No such key");
            } else {
                resolveCode.put("response", "OK");
            }
        }

        @Override
        public Map<String, String> getResolveCode() {
            return resolveCode;
        }
    }
  learner_created: false
- name: src/server/DataBase.java
  visible: true
  text: |
    package server;

    import com.google.gson.Gson;
    import com.google.gson.GsonBuilder;
    import com.google.gson.reflect.TypeToken;

    import java.io.*;
    import java.lang.reflect.Type;
    import java.nio.file.Files;
    import java.nio.file.Path;
    import java.nio.file.Paths;
    import java.util.HashMap;
    import java.util.Map;


    public class DataBase {

        private Map<String, String> dataBase;


        public DataBase() {

            Path path = Paths.get("./src/server/data/db.json");
            if (Files.exists(path)) {
                try {
                    dataBase = readJSON();
                } catch (FileNotFoundException e) {
                    e.printStackTrace();
                }
            } else {
                dataBase = new HashMap<>();
                try {
                    writeJSON(dataBase);
                } catch (IOException e) {
                    e.printStackTrace();
                }
            }

        }

        public String getEntry(String key) {

            return dataBase.getOrDefault(key, "No such key");
        }

        public void setEntry(String key, String value)
        {
            dataBase.put(key,value);
            try {
                writeJSON(dataBase);
            } catch (IOException e) {
                e.printStackTrace();
            }
        }

        public String deleteEntry(String key) {

            String returnMessage = dataBase.remove(key);
            try {
                writeJSON(dataBase);
            } catch (IOException e) {
                e.printStackTrace();
            }
            return returnMessage;
        }

        private static void writeJSON(Map<String, String> db) throws IOException {
            GsonBuilder builder = new GsonBuilder();
            Gson gson = builder.create();
            File file = new File("./src/server/data/db.json");
            FileWriter writer = new FileWriter(file);
            writer.write(gson.toJson(db));
            writer.close();
        }

        private static Map<String, String> readJSON() throws FileNotFoundException {
            GsonBuilder builder = new GsonBuilder();
            Gson gson = builder.create();
            Type empMapType = new TypeToken<Map<String, String>>() {}.getType();
            BufferedReader bufferedReader = new BufferedReader(
                    new FileReader("./src/server/data/db.json"));
            return gson.fromJson(bufferedReader, empMapType);
        }
    }
  learner_created: false
- name: src/server/ExitCommand.java
  visible: true
  text: |-
    package server;

    import java.util.HashMap;
    import java.util.Map;

    public class ExitCommand implements Command{

        @Override
        public void execute() {
        }

        @Override
        public Map<String, String> getResolveCode() {
            Map<String, String> maps = new HashMap<>();
            return maps;
        }
    }
  learner_created: false
- name: src/server/MessageBroker.java
  visible: true
  text: |-
    package server;

    import java.util.Map;

    public class MessageBroker {

        Command command;

        public void setCommand(Command command) {
            this.command = command;
        }

        public void executeCommand() {
            command.execute();
        }

        public Map<String, String> getResolveCode() {
            return command.getResolveCode();
        }

    }
  learner_created: false
- name: src/server/Command.java
  visible: true
  text: |-
    package server;

    import java.util.Map;

    public interface Command {

        public void execute();

        public Map<String, String> getResolveCode();

    }
  learner_created: false
- name: src/server/GetCommand.java
  visible: true
  text: |-
    package server;

    import java.util.HashMap;
    import java.util.Map;
    import java.util.TreeMap;

    public class GetCommand implements Command{

        DataBase dataBase;
        String index;
        private Map<String, String> resolveCode;

        public GetCommand(DataBase database, String index) {
            this.dataBase = database;
            this.index = index;
            resolveCode = new HashMap<>();
        }

        @Override
        public void execute() {
            String message = dataBase.getEntry(index);
            if (message.equals("No such key")) {
                this.resolveCode.put("response", "ERROR");
                this.resolveCode.put("reason", "No such key");
            } else {
                this.resolveCode.put("response", "OK");
                this.resolveCode.put("value", message);
            }

        }

        @Override
        public Map<String, String> getResolveCode() {
            return resolveCode;
        }

    }
  learner_created: false
- name: src/server/SetCommand.java
  visible: true
  text: |-
    package server;

    import java.util.HashMap;
    import java.util.Map;

    public class SetCommand implements Command{

        DataBase database;
        HashMap<String, String> message;


        public SetCommand(DataBase dataBase, HashMap<String, String> message) {
            this.database = dataBase;
            this.message = message;

        }

        @Override
        public void execute() {

            database.setEntry(message.get("key"), message.get("value"));
        }

        @Override
        public Map<String, String> getResolveCode() {
            Map<String, String> returnMessage = new HashMap<>();
            returnMessage.put("response", "OK");
            return returnMessage;
        }
    }
  learner_created: false
- name: test/JsonFinder.java
  visible: false
  text: |
    import org.hyperskill.hstest.exception.outcomes.WrongAnswer;

    import java.util.regex.Matcher;
    import java.util.regex.Pattern;

    public class JsonFinder {

        private static final Pattern pattern = Pattern.compile("\\{.+}");

        public static String findRequestJsonObject(String output) {

            Matcher matcher = pattern.matcher(output);

            while (matcher.find()) {
                String json = matcher.group();
                if (json.contains("type")) {
                    return json;
                }
            }

            throw new WrongAnswer("Can't find request JSON object in the output.\n" +
                "It should contain 'type' key");
        }

        public static String findResponseJsonObject(String output) {

            Matcher matcher = pattern.matcher(output);

            while (matcher.find()) {
                String json = matcher.group();
                if (json.contains("response")) {
                    return json;
                }
            }

            throw new WrongAnswer("Can't find request JSON object in the output.\n" +
                "It should contain 'response' key");
        }
    }
  learner_created: false
- name: test/JsonRequestBuilder.java
  visible: false
  text: |-
    import com.google.gson.Gson;
    import com.google.gson.JsonElement;
    import com.google.gson.JsonObject;

    class JsonBuilder {

        private final Gson gson = new Gson();
        private final JsonObject jsonObject = new JsonObject();

        private JsonBuilder() {

        }

        public static JsonBuilder newBuilder() {
            return new JsonBuilder();
        }

        public JsonBuilder addValue(String key, String value) {
            jsonObject.addProperty(key, value);
            return this;
        }

        public JsonBuilder addValue(String key, JsonElement value) {
            jsonObject.add(key, value);
            return this;
        }

        public JsonBuilder addJsonObject(String key, JsonObject object) {
            jsonObject.add(key, object);
            return this;
        }

        public String getAsString() {
            return jsonObject.toString();
        }

        public JsonObject getAsJsonObject() {
            return jsonObject;
        }
    }
  learner_created: false
- name: src/client/data/testGet.json
  visible: true
  text: '{"type":"get","key":"name"}'
  learner_created: false
- name: src/client/data/testSet.json
  visible: true
  text: '{"type":"set","key":"name","value":"Kate"}'
  learner_created: false
- name: src/client/data/testDelete.json
  visible: true
  text: '{"type":"delete","key":"name"}'
  learner_created: false
- name: src/server/data/db.json
  visible: true
  learner_created: true
- name: src/client/data/getFile.json
  visible: true
  learner_created: true
- name: src/client/data/secondGetFile.json
  visible: true
  learner_created: true
- name: src/client/data/deleteFile.json
  visible: true
  learner_created: true
- name: src/client/data/setFile.json
  visible: true
  learner_created: true
- name: src/client/data/updateFile.json
  visible: true
  learner_created: true
- name: src/server/data/data.json
  visible: true
  learner_created: true
feedback_link: https://hyperskill.org/projects/65/stages/353/implement#comment
status: Solved
feedback:
  message: Well done! You've finished the project. Select a new project on <a href="https://hyperskill.org/projects">JetBrains
    Academy</a> to continue learning.
  time: Thu, 28 Oct 2021 19:29:39 UTC
record: 5
